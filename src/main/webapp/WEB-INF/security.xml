<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <!-- intercept-url - url, который прослушивает spring-security
    и в зависимости прав, назначенных на этот url разрешает или блокирует доступ пользователя
    form-login описывает взаимодействие с login страницей, login-page куда нужно отправить пользователя,
    если он ещё не залогинен,
    username-parameter - то, чему должно равняться атрибут name поля ввода input в форме логина,
    чтобы spring-security понял, что этот input отвечает за имя пользователя,
    password-parameter - то, чему должно равняться атрибут name поля ввода input в форме логина,
    чтобы spring-security понял, что этот input отвечает за пароль пользователя,
    login-processing-url - то, чему должен равняться атрибут action формы логина (url(относительный),
    на который отпраляются введённые данные (поэтому spring-security понимает, что эти данные предназначены ему))
    authentication-success-handler-ref - в случае успешной идентификации и аутентификации передаётся упраление этому бину(компоненту, классу)
     -->

    <http use-expressions="true">
        <intercept-url pattern="/" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <intercept-url pattern="/index*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <intercept-url pattern="/adminpage*" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/userpage*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <intercept-url pattern="/add*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <intercept-url pattern="/delete/*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
        <form-login login-page="/login"
                    username-parameter="j_username"
                    password-parameter="j_password"
                    login-processing-url="/j_spring_security_check"
                    authentication-success-handler-ref="successHandler"
        />
        <logout logout-url="/logout" logout-success-url="/login"/>

        <!--менеджер сессий  -->
        <session-management>
            <!-- бин внутри этого тэга описывает возможности по параллельным сессиям
            (т.е. управляет возможностью открытия разных сессий для одного пользователя, например с разных устройств)-->
            <concurrency-control session-registry-alias="sessionRegistry"/>
        </session-management>

        <remember-me/>
        <!-- пока не используем специальные csrf-токены, которые должны отпраляться клиентом при запросах -->
        <csrf disabled="true"/>
    </http>

    <!-- Менеджер аутентификации, здесь мы пишем свой бин, в котором был переопределён метод loadUserByUsername(String username),
    что делает эта функция смотреть в классе UserLogDAOImpl этого проекта -->
    <authentication-manager>
        <authentication-provider user-service-ref="userLogDAOImpl">
            <!-- У класса UserLogDAOImpl есть поле bcryptEncoder, которое spring проинжектит описанным ниже бином -->
            <password-encoder ref="bcryptEncoder"/>
        </authentication-provider>
    </authentication-manager>

    <!-- бин, который использовался выше, в нём описываются действия при успешной аутентификации -->
    <beans:bean id="successHandler" class="ru.ncteam.levelchat.authentication.AuthenticationSuccessHandlerImpl"/>

    <!--<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>-->


</beans:beans>